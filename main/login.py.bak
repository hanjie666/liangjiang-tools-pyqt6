# Form implementation generated from reading ui file 'view/login.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import os
import importlib.util
import json
import pymysql
from datetime import datetime

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QWidget, QMessageBox

class Ui_LoginForm(QWidget):
    def __init__(self):
        super(Ui_LoginForm, self).__init__()
        self.setupUi(self)
        
        # MySQL 数据库配置
        self.db_config = {
            'host': '43.134.117.111',
            'user': 'root',
            'port': 3306,
            'password': 'Chjwudi008...',  # 请修改为您的 MySQL 密码
            'database': 'dc_chat_app',
            'charset': 'utf8mb4',
            'cursorclass': pymysql.cursors.DictCursor
        }
        
        # 初始化数据库
        self.init_database()
        
        # 连接登录按钮的点击事件
        self.loginButton.clicked.connect(self.login)
        
        # 创建 DC-Chat 窗口实例但不显示
        self.dc_chat_window = None
        
        # 配置文件路径
        current_dir = os.path.dirname(os.path.abspath(__file__))
        self.config_file = os.path.join(current_dir, 'config.json')
        
        # 如果配置文件不存在，尝试其他可能的路径
        if not os.path.exists(self.config_file):
            # 如果是打包后的应用
            if getattr(sys, 'frozen', False):
                # 尝试从Resources目录加载
                if sys.platform == 'darwin':
                    # macOS应用程序包
                    executable_dir = os.path.dirname(sys.executable)
                    if 'Contents/MacOS' in executable_dir:
                        resources_dir = os.path.join(os.path.dirname(os.path.dirname(executable_dir)), 'Resources')
                        self.config_file = os.path.join(resources_dir, 'main', 'config.json')
                        print(f"尝试从Resources目录加载config.json: {self.config_file}")
        
        # 如果仍然找不到文件，使用当前目录
        if not os.path.exists(self.config_file):
            self.config_file = os.path.join(os.getcwd(), 'config.json')
            print(f"使用当前目录的config.json: {self.config_file}")
        
        # 检查是否有保存的卡密
        self.check_saved_password()

    def setupUi(self, LoginForm):
        LoginForm.setObjectName("LoginForm")
        LoginForm.resize(448, 128)
        self.formLayoutWidget = QtWidgets.QWidget(parent=LoginForm)
        self.formLayoutWidget.setGeometry(QtCore.QRect(40, 60, 301, 42))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(10, 10, 10, 10)
        self.formLayout.setObjectName("formLayout")
        self.label = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.label.setObjectName("label")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.label)
        self.CodeLineEdit = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.CodeLineEdit.setObjectName("CodeLineEdit")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.CodeLineEdit)
        self.label_2 = QtWidgets.QLabel(parent=LoginForm)
        self.label_2.setGeometry(QtCore.QRect(160, 20, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Academy Engraved LET")
        font.setPointSize(24)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.loginButton = QtWidgets.QPushButton(parent=LoginForm)
        self.loginButton.setGeometry(QtCore.QRect(320, 65, 71, 31))
        self.loginButton.setObjectName("loginButton")

        self.retranslateUi(LoginForm)
        QtCore.QMetaObject.connectSlotsByName(LoginForm)

    def retranslateUi(self, LoginForm):
        _translate = QtCore.QCoreApplication.translate
        LoginForm.setWindowTitle(_translate("LoginForm", "Form"))
        self.label.setText(_translate("LoginForm", "请输入卡密："))
        self.label_2.setText(_translate("LoginForm", "良匠工具箱"))
        self.loginButton.setText(_translate("LoginForm", "登录"))

    def get_db_connection(self):
        """获取数据库连接"""
        try:
            conn = pymysql.connect(**self.db_config)
            return conn
        except pymysql.Error as e:
            print(f"数据库连接错误: {e}")
            return None

    def init_database(self):
        """初始化数据库，创建表并插入测试数据"""
        try:
            # 尝试连接到 MySQL 服务器（不指定数据库）
            conn = pymysql.connect(
                host=self.db_config['host'],
                user=self.db_config['user'],
                password=self.db_config['password'],
                charset='utf8mb4'
            )
            
            with conn.cursor() as cursor:
                # 创建数据库（如果不存在）
                cursor.execute(f"CREATE DATABASE IF NOT EXISTS {self.db_config['database']}")
            
            conn.close()
            
            # 连接到指定的数据库
            conn = self.get_db_connection()
            if not conn:
                print("无法连接到数据库")
                return
                
            with conn.cursor() as cursor:
                # 创建卡密表
                cursor.execute('''
                CREATE TABLE IF NOT EXISTS activation_codes (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    code VARCHAR(255) NOT NULL UNIQUE,
                    is_active TINYINT NOT NULL DEFAULT 1,
                    expiry_date DATE NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                ''')
                
                # 检查是否已有测试数据
                cursor.execute("SELECT COUNT(*) as count FROM activation_codes")
                result = cursor.fetchone()
                count = result['count']
                
                # 如果没有数据，插入测试数据
                if count == 0:
                    cursor.execute('''
                    INSERT INTO activation_codes (code, is_active, expiry_date) VALUES 
                    ('hanjie', 1, '2023-12-31'),
                    ('test123', 1, '2023-06-01'),
                    ('inactive', 0, '2023-12-31')
                    ''')
            
            conn.commit()
            conn.close()
            print("数据库初始化成功")
        except Exception as e:
            print(f"初始化数据库出错: {e}")
    
    def validate_code(self, code):
        """验证卡密是否有效"""
        try:
            conn = self.get_db_connection()
            if not conn:
                return False, "无法连接到数据库"
            
            with conn.cursor() as cursor:
                # 查询卡密
                cursor.execute('''
                SELECT is_active, expiry_date FROM activation_codes 
                WHERE code = %s
                ''', (code,))
                
                result = cursor.fetchone()
            
            conn.close()
            
            if not result:
                return False, "卡密不存在"
            
            is_active = result['is_active']
            expiry_date = result['expiry_date']
            
            # 检查卡密是否激活
            if not is_active:
                return False, "卡密未激活"
            
            # 检查卡密是否过期
            today = datetime.now().date()
            if today > expiry_date:
                return False, "卡密已过期"
            
            return True, "卡密有效"
        
        except Exception as e:
            print(f"验证卡密出错: {e}")
            return False, f"验证卡密时发生错误: {e}"

    def check_saved_password(self):
        """检查是否有保存的卡密，如果有则自动登录"""
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
                    saved_password = config.get('password', '')
                    
                    if saved_password:
                        # 验证保存的卡密
                        is_valid, message = self.validate_code(saved_password)
                        if is_valid:
                            # 有保存的有效卡密，自动登录
                            QtCore.QTimer.singleShot(500, self.auto_login)
            except Exception as e:
                print(f"读取配置文件出错: {e}")
    
    def auto_login(self):
        """自动登录"""
        # 在这里动态导入dc-chat.py模块，避免循环导入
        try:
            # 动态导入 dc-chat.py 模块
            current_dir = os.path.dirname(os.path.abspath(__file__))
            dc_chat_path = os.path.join(current_dir, 'dc-chat.py')
            
            # 如果文件不存在，尝试其他可能的路径
            if not os.path.exists(dc_chat_path):
                # 如果是打包后的应用
                if getattr(sys, 'frozen', False):
                    # 尝试从Resources目录加载
                    if sys.platform == 'darwin':
                        # macOS应用程序包
                        executable_dir = os.path.dirname(sys.executable)
                        if 'Contents/MacOS' in executable_dir:
                            resources_dir = os.path.join(os.path.dirname(os.path.dirname(executable_dir)), 'Resources')
                            dc_chat_path = os.path.join(resources_dir, 'main', 'dc-chat.py')
                            print(f"尝试从Resources目录加载dc-chat.py: {dc_chat_path}")
            
            # 如果仍然找不到文件，尝试在当前目录查找
            if not os.path.exists(dc_chat_path):
                dc_chat_path = os.path.join(os.getcwd(), 'main', 'dc-chat.py')
                print(f"尝试从当前目录加载dc-chat.py: {dc_chat_path}")
            
            # 如果仍然找不到文件，尝试相对路径
            if not os.path.exists(dc_chat_path):
                dc_chat_path = 'main/dc-chat.py'
                print(f"尝试使用相对路径加载dc-chat.py: {dc_chat_path}")
            
            print(f"使用dc-chat.py路径: {dc_chat_path}")
            spec = importlib.util.spec_from_file_location("dc_chat", dc_chat_path)
            dc_chat = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(dc_chat)
            
            self.dc_chat_window = dc_chat.Ui_Form()
            self.dc_chat_window.show()
            self.hide()
        except Exception as e:
            print(f"加载DC-Chat窗口失败: {e}")
            QMessageBox.critical(self, "错误", f"加载DC-Chat窗口失败: {e}")
    
    def save_password(self, password):
        """保存卡密到配置文件"""
        config = {'password': password}
        try:
            with open(self.config_file, 'w') as f:
                json.dump(config, f)
        except Exception as e:
            print(f"保存配置文件出错: {e}")

    def login(self):
        """验证卡密并在验证成功后跳转到 DC-Chat 窗口"""
        entered_password = self.CodeLineEdit.text()
        
        if not entered_password:
            QMessageBox.warning(self, "登录失败", "请输入卡密！")
            return
        
        # 验证卡密
        is_valid, message = self.validate_code(entered_password)
        
        if is_valid:
            # 密码正确，保存卡密
            self.save_password(entered_password)
            
            # 在这里动态导入dc-chat.py模块，避免循环导入
            try:
                # 动态导入 dc-chat.py 模块
                current_dir = os.path.dirname(os.path.abspath(__file__))
                dc_chat_path = os.path.join(current_dir, 'dc-chat.py')
                
                # 如果文件不存在，尝试其他可能的路径
                if not os.path.exists(dc_chat_path):
                    # 如果是打包后的应用
                    if getattr(sys, 'frozen', False):
                        # 尝试从Resources目录加载
                        if sys.platform == 'darwin':
                            # macOS应用程序包
                            executable_dir = os.path.dirname(sys.executable)
                            if 'Contents/MacOS' in executable_dir:
                                resources_dir = os.path.join(os.path.dirname(os.path.dirname(executable_dir)), 'Resources')
                                dc_chat_path = os.path.join(resources_dir, 'main', 'dc-chat.py')
                                print(f"尝试从Resources目录加载dc-chat.py: {dc_chat_path}")
                
                # 如果仍然找不到文件，尝试在当前目录查找
                if not os.path.exists(dc_chat_path):
                    dc_chat_path = os.path.join(os.getcwd(), 'main', 'dc-chat.py')
                    print(f"尝试从当前目录加载dc-chat.py: {dc_chat_path}")
                
                # 如果仍然找不到文件，尝试相对路径
                if not os.path.exists(dc_chat_path):
                    dc_chat_path = 'main/dc-chat.py'
                    print(f"尝试使用相对路径加载dc-chat.py: {dc_chat_path}")
                
                print(f"使用dc-chat.py路径: {dc_chat_path}")
                spec = importlib.util.spec_from_file_location("dc_chat", dc_chat_path)
                dc_chat = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(dc_chat)
                
                # 创建并显示 DC-Chat 窗口
                self.dc_chat_window = dc_chat.Ui_Form()
                self.dc_chat_window.show()
                # 隐藏登录窗口
                self.hide()
            except Exception as e:
                print(f"加载DC-Chat窗口失败: {e}")
                QMessageBox.critical(self, "错误", f"加载DC-Chat窗口失败: {e}")
        else:
            # 密码错误，显示错误消息
            QMessageBox.warning(self, "登录失败", f"卡密验证失败: {message}")


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_LoginForm()
    ui.show()
    sys.exit(app.exec())